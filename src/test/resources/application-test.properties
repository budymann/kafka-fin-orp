spring.application.name=kafka-fin-orp
server.port=8080

spring.h2.console.enabled=true
# For in-memory storage
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=simplepass
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.show-sql=true
# This has to be over-ridden because
# it's not kept create rather kept none or validate after the first ddl creation.
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create

##Kafka Configurations
spring.cloud.function.definition=consumer;supplier;consensor;senconsor
#Consumer
spring.cloud.stream.bindings.consumer-in-0.destination= sensor-topic
spring.cloud.stream.bindings.consumer-in-0.group= sensor-topic-group
spring.cloud.stream.bindings.consumer-in-0.consumer.content-type= avro/bytes
spring.cloud.stream.bindings.consumer-in-0.consumer.use-native-decoding= true
spring.cloud.stream.bindings.consumer-in-0.consumer.batch-mode= true

spring.cloud.stream.kafka.binder.consumerProperties.max.poll.records= 20
spring.cloud.stream.kafka.binder.consumerProperties.fetch.min.bytes= 500000
spring.cloud.stream.kafka.binder.consumerProperties.fetch6.max.wait.ms= 10000
spring.cloud.stream.kafka.bindings.consumer-in-0.consumer.configuration.value.deserializer=com.genericnpc.kafkafinorp.customavro.CustomKafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.consumer-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.consumer-in-0.consumer.configuration.specific.avro.reader=true


#consensor 2
spring.cloud.stream.bindings.consensor-in-0.destination= sensor-topic-out
spring.cloud.stream.bindings.consensor-in-0.group= sensor-topic-group-read-committed
spring.cloud.stream.bindings.consensor-in-0.consumer.content-type= avro/bytes
spring.cloud.stream.bindings.consensor-in-0.consumer.use-native-decoding= true
spring.cloud.stream.bindings.consensor-in-0.consumer.batch-mode= true
spring.cloud.stream.kafka.bindings.consensor-in-0.consumer.configuration.value.deserializer=com.genericnpc.kafkafinorp.customavro.CustomKafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.consensor-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.consensor-in-0.consumer.configuration.specific.avro.reader=true
spring.cloud.stream.kafka.bindings.consensor-in-0.consumer.configuration.isolation.level= read_committed

#consensor 2
spring.cloud.stream.bindings.senconsor-in-0.destination= sensor-topic-out
spring.cloud.stream.bindings.senconsor-in-0.group= sensor-topic-group-read-uncommitted
spring.cloud.stream.bindings.senconsor-in-0.consumer.content-type= avro/bytes
spring.cloud.stream.bindings.senconsor-in-0.consumer.use-native-decoding= true
spring.cloud.stream.bindings.senconsor-in-0.consumer.batch-mode= true
spring.cloud.stream.kafka.bindings.senconsor-in-0.consumer.configuration.value.deserializer=com.genericnpc.kafkafinorp.customavro.CustomKafkaAvroDeserializer
spring.cloud.stream.kafka.bindings.senconsor-in-0.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.bindings.senconsor-in-0.consumer.configuration.specific.avro.reader=true
spring.cloud.stream.kafka.bindings.senconsor-in-0.consumer.configuration.isolation.level= read_uncommitted


#Producer
spring.cloud.stream.bindings.supplier-out-0.destination= sensor-topic
spring.cloud.stream.bindings.supplier-out-0.producer.useNativeEncoding= true
spring.cloud.stream.kafka.bindings.supplier-out-0.producer.configuration.value.serializer= com.genericnpc.kafkafinorp.customavro.CustomKafkaAvroSerializer
spring.cloud.stream.kafka.bindings.supplier-out-0.producer.configuration.schema.registry.url= http://localhost:8081
spring.cloud.stream.kafka.bindings.supplier-out-0.producer.configuration.specific.avro.reader=true

#Producer 2
spring.cloud.stream.bindings.output-out-0.destination= sensor-topic-out
spring.cloud.stream.bindings.output-out-0.producer.useNativeEncoding= true
spring.cloud.stream.kafka.bindings.output-out-0.producer.configuration.value.serializer= com.genericnpc.kafkafinorp.customavro.CustomKafkaAvroSerializer
spring.cloud.stream.kafka.bindings.output-out-0.producer.configuration.schema.registry.url= http://localhost:8081
spring.cloud.stream.kafka.bindings.output-out-0.producer.configuration.specific.avro.reader=true